{
  "version": 3,
  "sources": ["../lib/ctors.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Float64Array = require( '@stdlib/array-float64' );\nvar Float32Array = require( '@stdlib/array-float32' );\nvar Int16Array = require( '@stdlib/array-int16' );\nvar Int32Array = require( '@stdlib/array-int32' );\nvar Int8Array = require( '@stdlib/array-int8' );\nvar Uint16Array = require( '@stdlib/array-uint16' );\nvar Uint32Array = require( '@stdlib/array-uint32' );\nvar Uint8Array = require( '@stdlib/array-uint8' );\nvar Uint8ClampedArray = require( '@stdlib/array-uint8c' );\nvar Complex64Array = require( '@stdlib/array-complex64' );\nvar Complex128Array = require( '@stdlib/array-complex128' );\nvar BooleanArray = require( '@stdlib/array-bool' );\n\n\n// MAIN //\n\nvar ctors = {\n\t'Float64Array': Float64Array,\n\t'Float32Array': Float32Array,\n\t'Int32Array': Int32Array,\n\t'Uint32Array': Uint32Array,\n\t'Int16Array': Int16Array,\n\t'Uint16Array': Uint16Array,\n\t'Int8Array': Int8Array,\n\t'Uint8Array': Uint8Array,\n\t'Uint8ClampedArray': Uint8ClampedArray,\n\t'Complex64Array': Complex64Array,\n\t'Complex128Array': Complex128Array,\n\t'BooleanArray': BooleanArray\n};\n\n\n// EXPORTS //\n\nmodule.exports = ctors;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isArray = require( '@stdlib/assert-is-array' );\nvar ctors = require( './ctors.js' );\n\n\n// MAIN //\n\n/**\n* Revives a JSON-serialized typed array.\n*\n* @param {string} key - key\n* @param {*} value - value\n* @returns {(*|TypedArray)} value or typed array\n*\n* @example\n* var parseJSON = require( '@stdlib/utils-parse-json' );\n*\n* var str = '{\"type\":\"Float64Array\",\"data\":[5,3]}';\n*\n* var arr = parseJSON( str, reviveTypedArray );\n* // returns <Float64Array>[ 5.0, 3.0 ]\n*/\nfunction reviveTypedArray( key, value ) {\n\tvar ctor;\n\tif (\n\t\tvalue &&\n\t\tvalue.type &&\n\t\tisArray( value.data )\n\t) {\n\t\tctor = ctors[ value.type ];\n\t\tif ( ctor ) {\n\t\t\treturn new ctor( value.data );\n\t\t}\n\t}\n\treturn value;\n}\n\n\n// EXPORTS //\n\nmodule.exports = reviveTypedArray;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Revive a JSON-serialized typed array.\n*\n* @module @stdlib/array-reviver\n*\n* @example\n* var parseJSON = require( '@stdlib/utils-parse-json' );\n* var reviveTypedArray = require( '@stdlib/array-reviver' );\n*\n* var str = '{\"type\":\"Float64Array\",\"data\":[5,3]}';\n*\n* var arr = parseJSON( str, reviveTypedArray );\n* // returns <Float64Array>[ 5.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAe,QAAS,uBAAwB,EAChDC,EAAe,QAAS,uBAAwB,EAChDC,EAAa,QAAS,qBAAsB,EAC5CC,EAAa,QAAS,qBAAsB,EAC5CC,EAAY,QAAS,oBAAqB,EAC1CC,EAAc,QAAS,sBAAuB,EAC9CC,EAAc,QAAS,sBAAuB,EAC9CC,EAAa,QAAS,qBAAsB,EAC5CC,EAAoB,QAAS,sBAAuB,EACpDC,EAAiB,QAAS,yBAA0B,EACpDC,EAAkB,QAAS,0BAA2B,EACtDC,EAAe,QAAS,oBAAqB,EAK7CC,EAAQ,CACX,aAAgBZ,EAChB,aAAgBC,EAChB,WAAcE,EACd,YAAeG,EACf,WAAcJ,EACd,YAAeG,EACf,UAAaD,EACb,WAAcG,EACd,kBAAqBC,EACrB,eAAkBC,EAClB,gBAAmBC,EACnB,aAAgBC,CACjB,EAKAZ,EAAO,QAAUa,ICxDjB,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAU,QAAS,yBAA0B,EAC7CC,EAAQ,IAoBZ,SAASC,EAAkBC,EAAKC,EAAQ,CACvC,IAAIC,EACJ,OACCD,GACAA,EAAM,MACNJ,EAASI,EAAM,IAAK,IAEpBC,EAAOJ,EAAOG,EAAM,IAAK,EACpBC,GACG,IAAIA,EAAMD,EAAM,IAAK,EAGvBA,CACR,CAKAL,EAAO,QAAUG,ICxBjB,IAAII,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_ctors", "__commonJSMin", "exports", "module", "Float64Array", "Float32Array", "Int16Array", "Int32Array", "Int8Array", "Uint16Array", "Uint32Array", "Uint8Array", "Uint8ClampedArray", "Complex64Array", "Complex128Array", "BooleanArray", "ctors", "require_main", "__commonJSMin", "exports", "module", "isArray", "ctors", "reviveTypedArray", "key", "value", "ctor", "main"]
}
